using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;

namespace LeveledDeleter
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline
                .Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "LeveledDeleter.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (
                ILeveledItemGetter baseLVLI in state
                    .LoadOrder.PriorityOrder.LeveledItem()
                    .WinningOverrides()
            )
            {
                // Sanity checks to skip unnecessary processing
                if (baseLVLI.Entries == null || baseLVLI.Entries.Count == 0)
                    continue;

                if (Settings.ListBlacklist.Contains(baseLVLI))
                {
                    Console.WriteLine($"Skipping {baseLVLI.EditorID}");
                    continue;
                }
                ;

                var modifiedLVLI = baseLVLI.DeepCopy();

                var itemList = modifiedLVLI.Entries;
                if (itemList == null)
                    continue;

                for (int i = 0; i < itemList.Count; i++)
                {
                    var ItemEntry = itemList[i];

                    // Sanity checks to skip unnecessary processing
                    if (
                        ItemEntry.Data == null
                        || ItemEntry.Data.Reference == null
                        || !ItemEntry.Data.Reference.TryResolve(
                            state.LinkCache,
                            out var itemToCheck
                        )
                        || itemToCheck is not IItemGetter
                        || itemToCheck is ILeveledItemGetter
                    )
                        continue;

                    if (Settings.ItemsToKeep.Contains(itemToCheck))
                    {
                        Console.WriteLine(
                            $"Skipping {itemToCheck.EditorID} in {baseLVLI.EditorID}"
                        );
                        continue;
                    }
                    ;

                    if (Settings.ItemsToRemove.Contains(itemToCheck))
                    {
                        itemList.RemoveAt(i);
                        i--;
                        Console.WriteLine(
                            $"Removing {itemToCheck.EditorID} from {baseLVLI.EditorID}"
                        );
                        continue;
                    }
                    ;

                    if (itemToCheck is IKeywordedGetter itemToCheckKeywords)
                    {
                        if (
                            itemToCheckKeywords.Keywords != null
                            && itemToCheckKeywords.Keywords.Count != 0
                        )
                        {
                            foreach (
                                IFormLinkGetter<IKeywordGetter> keyword in itemToCheckKeywords.Keywords
                            )
                            {
                                if (Settings.KeywordsToRemove.Contains(keyword))
                                {
                                    itemList.RemoveAt(i);
                                    i--;
                                    Console.WriteLine(
                                        $"Removing {itemToCheck.EditorID} from {baseLVLI.EditorID}"
                                    );
                                    continue;
                                }
                                ;
                            }
                        }
                    }
                }

                if (itemList.Count != baseLVLI.Entries.Count)
                    state.PatchMod.LeveledItems.Set(modifiedLVLI);
            }
        }
    }
}
